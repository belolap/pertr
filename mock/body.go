// Code generated by MockGen. DO NOT EDIT.
// Source: io (interfaces: ReadCloser)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Body is a mock of ReadCloser interface.
type Body struct {
	ctrl     *gomock.Controller
	recorder *BodyMockRecorder
}

// BodyMockRecorder is the mock recorder for Body.
type BodyMockRecorder struct {
	mock *Body
}

// NewBody creates a new mock instance.
func NewBody(ctrl *gomock.Controller) *Body {
	mock := &Body{ctrl: ctrl}
	mock.recorder = &BodyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Body) EXPECT() *BodyMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Body) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *BodyMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Body)(nil).Close))
}

// Read mocks base method.
func (m *Body) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *BodyMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*Body)(nil).Read), arg0)
}
